<?xml version="1.0" encoding="UTF-8"?>
<datas>
    <data flag="2" title="描述">
        <problem>1、Android的四大组件是哪些，它们的作用？</problem>
        <answer>
            答：Activity：Activity是Android程序与用户交互的窗口，是Android构造块中最基本的一种，它需要为保持各界面的状态，做很多持久化的事情，妥善管理生命周期以及一些跳转逻辑
            service：后台服务于Activity，封装有一个完整的功能逻辑实现，接受上层指令，完成相关的食物，定义好需要接受的Intent提供同步和异步的接口
            Content Provider：是Android提供的第三方应用数据的访问方案，可以派生Content
            Provider类，对外提供数据，可以像数据库一样进行选择排序，屏蔽内部数据的存储细节，向外提供统一的借口模型，大大简化上层应用，对数据的整合提供了更方便的途径
            BroadCast Receiver：接受一种或者多种Intent作触发事件，接受相关消息，做一些简单处理，转换成一条Notification，统一了Android的事件广播模型
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>2、请介绍下Android中常用的六种布局。</problem>
        <answer>
            在Android中，共有六种布局方式，分别是：
            LinearLayout （线性布局），
            RelativeLayout（相对布局），
            FrameLayout（帧布局），
            AbsoluteLayout（绝对布局），
            TableLayout（表格布局），
            GridLayou（网格布局）。
            （1）线性布局LinearLayout，可以指定子控件的排列方式，比如垂直方向或水平方向。
            （2）绝对布局Relavitelayout，可以指定子控件的相对位置，比如上下左右、居中等，也可以指定一个控件相对另 一个控件的相对位置。
            （3）帧布局FrameLayout，显示的View都是一层一层地往上加，显示的是最上面的一层。应用在动态显示碎片 Fragment也是比较多的。 上面三种布局相对来说应用是比较多的。下面的三种应用就少一点了。
            （4）绝对布局AbsoluteLayout，View的显示要定义具体的单位长度px。这个局限性比较多，不能匹配多种屏幕， 基本已经不使用了。
            （5）表格布局TableLayout，是线性布局的子类，显示据一般是一行一行的，一行可以有多列，列与列对齐是很方便的。
            （6）表格布局GridLayout，作为android 4.0 后新增的一个布局,与前面介绍过的TableLayout(表格布局)其 实有点大同小异;如果是显示类似网格效果的多个控件是非常方便的。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>3、android中的动画有哪几类，它们的特点和区别是什么</problem>
        <answer>
            答：两种，一种是Tween动画、还有一种是Frame动画。Tween动画，这种实现方式可以使视图组件移动、放大、缩小以及产生透明度的变化;另一种Frame动画，传统的动画方法，通过顺序的播放排列好的图片来实现，类似电影。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>4、android 中有哪几种解析xml的类？官方推荐哪种？以及它们的原理和区别。</problem>
        <answer>
            答：XML解析主要有三种方式，SAX、DOM、PULL。常规在PC上开发我们使用Dom相对轻松些，但一些性能敏感的数据库或手机上还是主要采用SAX方式，SAX读取是单向的，优点:不占内存空间、解析属性方便，但缺点就是对于套嵌多个分支来说处理不是很方便。而DOM方式会把整个XML文件加载到内存中去，这里Android开发网提醒大家该方法在查找方面可以和XPath很好的结合如果数据量不是很大推荐使用，而PULL常常用在J2ME对于节点处理比较好，类似SAX方式，同样很节省内存，在J2ME中我们经常使用的KXML库来解析。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>5、ListView的优化方案？</problem>
        <answer>
            答：（1）如果自定义适配器，那么在getView方法中要考虑方法传进来的参数contentView是否为null，如果为null就创建contentView并返回，如果不为null则直接使用。在这个方法中尽可能少创建view。
            （2）给contentView设置tag（setTag（）），传入一个viewHolder对象，用于缓存要显示的数据，可以达到图像数据异步加载的效果。
            （3）如果listview需要显示的item很多，就要考虑分页加载。比如一共要显示100条或者更多的时候，我们可以考虑先加载20条，等用户拉到列表底部的时候再去加载接下来的20条。
            （4）如果有很多图片可以对图进行压缩裁剪
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>6、请介绍下Android的数据存储方式。</problem>
        <answer>
            答：使用SharedPreferences存储数据；文件存储数据；SQLite数据库存储数据；使用ContentProvider存储数据；网络存储数据；
            （1）使用SharedPreferences存储数据
            首先说明SharedPreferences存储方式，它是 Android提供的用来存储一些简单配置信息的一种机制，例如：登录用户的用户名与密码。其采用了Map数据结构来存储数据，以键值的方式存储，可以简单的读取与写入
            （2）文件存储数据
            文件存储方式是一种较常用的方法，在Android中读取/写入文件的方法，与 Java中实现I/O的程序是完全一样的，提供了openFileInput()和openFileOutput()方法来读取设备上的文件。
            （3）网络存储数据
            网络存储方式，需要与Android 网络数据包打交道.
            （4）ContentProvider
            当应用继承ContentProvider类，并重写该类用于提供数据和存储数据的方法，就可以向其他应用共享其数据。


        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>7、activity的启动模式有哪些？是什么含义？</problem>
        <answer>
            答：在android里，有4种activity的启动模式，分别为：
            “standard” (默认)
            “singleTop”
            “singleTask”
            “singleInstance”

            它们主要有如下不同：
            （1） 如何决定所属task
            “standard”和”singleTop”的activity的目标task，和收到的Intent的发送者在同一个task内，除非intent包括参数FLAG_ACTIVITY_NEW_TASK。
            如果提供了FLAG_ACTIVITY_NEW_TASK参数，会启动到别的task里。
            “singleTask”和”singleInstance”总是把activity作为一个task的根元素，他们不会被启动到一个其他task里。
            （2） 是否允许多个实例
            “standard”和”singleTop”可以被实例化多次，并且存在于不同的task中，且一个task可以包括一个activity的多个实例；
            “singleTask”和”singleInstance”则限制只生成一个实例，并且是task的根元素。 singleTop要求如果创建intent的时候栈顶已经有要创建
            的Activity的实例，则将intent发送给该实例，而不发送给新的实例。
            （3） 是否允许其它activity存在于本task内
            “singleInstance”独占一个task，其它activity不能存在那个task里；如果它启动了一个新的activity，不管新的activity的launch mode
            如何，新的activity都将会到别的task里运行（如同加了FLAG_ACTIVITY_NEW_TASK参数）。
            而另外三种模式，则可以和其它activity共存。
            （4）是否每次都生成新实例
            “standard”对于没一个启动Intent都会生成一个activity的新实例；
            “singleTop”的activity如果在task的栈顶的话，则不生成新的该activity的实例，直接使用栈顶的实例，否则，生成该activity的实例。
            比如现在task栈元素为A-B-C-D（D在栈顶），这时候给D发一个启动intent，如果D是 “standard”的，则生成D的一个新实例，栈变为A－B－C－D－D。
            如果D是singleTop的话，则不会生产D的新实例，栈状态仍为A-B-C-D
            如果这时候给B发Intent的话，不管B的launchmode是”standard” 还是 “singleTop” ，都会生成B的新实例，栈状态变为A-B-C-D-B。
            “singleInstance”是其所在栈的唯一activity，它会每次都被重用。
            “singleTask”如果在栈顶，则接受intent，否则，该intent会被丢弃，但是该task仍会回到前台。
            当已经存在的activity实例处理新的intent时候，会调用onNewIntent()方法
            如果收到intent生成一个activity实例，那么用户可以通过back键回到上一个状态；如果是已经存在的一个activity来处理这个intent的话，用户不能通过按back键返回到这之前的状态。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>8、请描述下Activity的生命周期。</problem>
        <answer>
            答：activity的生命周期方法有：onCreate()、onStart()、onReStart()、onResume()、onPause()、onStop()、onDestory()；
            可见生命周期：从onStart()直到系统调用onStop()
            前台生命周期：从onResume()直到系统调用onPause()
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>9、activity在屏幕旋转时的生命周期</problem>
        <answer>
            答：不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次；设置Activity的android:configChanges="orientation"时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次；设置Activity的android:configChanges="orientation|keyboardHidden"时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>10、如何启用Service，如何停用Service。</problem>
        <answer>
            答：服务不能自己运行，需要通过调用Context.startService()或Context.bindService()方法启动服务。这两个方法都可以启动Service，但是它们的使用场合有所不同。使用startService()方法启用服务，调用者与服务之间没有关连，即使调用者退出了，服务仍然运行。使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。
            如果打算采用Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法。
            如果打算采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()-->onDestroy()方法。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>11、注册广播有几种方式，这些方式有何优缺点？请谈谈Android引入广播机制的用意。</problem>
        <answer>
            答：首先写一个类要继承BroadcastReceiver
            第一种:在清单文件AndroidMainfest中声明
            第二种使用代码进行注册如:
            两种注册类型的区别是：
            1)第一种不是常驻型广播，也就是说广播跟随程序的生命周期。
            2)第二种是常驻型，也就是说当应用程序关闭后，如果有信息广播来，程序也会被系统调用自动运行。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>12、请解释下在单线程模型中Message、Handler、Message Queue、Looper之间的关系。</problem>
        <answer>
            答：简单的说，Handler获取当前线程中的looper对象，looper用来从存放Message的MessageQueue中取出Message，再有Handler进行Message的分发和处理.
            Message Queue(消息队列)：用来存放通过Handler发布的消息，通常附属于某一个创建它的线程，可以通过Looper.myQueue()得到当前线程的消息队列
            Handler：可以发布或者处理一个消息或者操作一个Runnable，通过Handler发布消息，消息将只会发送到与它关联的消息队列，然也只能处理该消息队列中的消息
            Looper：是Handler和消息队列之间通讯桥梁，程序组件首先通过Handler把消息传递给Looper，Looper把消息放入队列。Looper也把消息队列里的消息广播给所有的
            Handler：Handler接受到消息后调用handleMessage进行处理
            Message：消息的类型，在Handler类中的handleMessage方法中得到单个的消息进行处理
            在单线程模型下，为了线程通信问题，Android设计了一个Message Queue(消息队列)， 线程间可以通过该Message Queue并结合Handler和Looper组件进行信息交换。
        </answer>
    </data>





    <data flag="2" title="描述">
        <problem>13、说说mvc模式的原理，它在android中的运用,android的官方建议应用程序的开发采用mvc模式。何谓mvc？</problem>
        <answer>
            答：mvc是model,view,controller的缩写，mvc包含三个部分：
            模型（model）对象：是应用程序的主体部分，所有的业务逻辑都应该写在该层。
            视图（view）对象：是应用程序中负责生成用户界面的部分。也是在整个mvc架构中用户唯一可以看到的一层，接收用户的输入，显示处理结果。
            控制器（control）对象：是根据用户的输入，控制用户界面数据显示及更新model对象状态的部分，控制器更重要的一种导航功能，响应用户出发的相关事件，交给m层处理。
            android鼓励弱耦合和组件的重用，在android中mvc的具体体现如下：
            1)视图层（view）：一般采用xml文件进行界面的描述，使用的时候可以非常方便的引入，当然，如果你对android了解的比较的多了话，就一定可以想到在android中也可以使用javascript+html等的方式作为view层，当然这里需要进行java和javascript之间的通信，幸运的是，android提供了它们之间非常方便的通信实现。
            2)控制层（controller）：android的控制层的重任通常落在了众多的acitvity的肩上，这句话也就暗含了不要在acitivity中写代码，要通过activity交割model业务逻辑层处理，这样做的另外一个原因是android中的acitivity的响应时间是5s，如果耗时的操作放在这里，程序就很容易被回收掉。
            3)模型层（model）：对数据库的操作、对网络等的操作都应该在model里面处理，当然对业务计算等操作也是必须放在的该层的。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>14、什么是ANR 如何避免它？        </problem>
        <answer>
            答：ANR：Application Not Responding。在Android中，活动管理器和窗口管理器这两个系统服务负责监视应用程序的响应，当用户操作的在5s内应用程序没能做出反应，BroadcastReceiver在10秒内没有执行完毕，就会出现应用程序无响应对话框，这既是ANR。
            避免方法：Activity应该在它的关键生命周期方法（如onCreate()和onResume()）里尽可能少的去做创建操作。潜在的耗时操作，例如网络或数据库操作，或者高耗时的计算如改变位图尺寸，应该在子线程里（或者异步方式）来完成。主线程应该为子线程提供一个Handler，以便完成时能够提交给主线程。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>15、什么情况会导致Force Close ？如何避免？能否捕获导致其的异常？ </problem>
        <answer>
            答：程序出现异常，比如nullpointer。
            避免：编写程序时逻辑连贯，思维缜密。能捕获异常，在logcat中能看到异常信息
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>16、描述一下android的系统架构 </problem>
        <answer>
            答：android系统架构分从下往上为linux 内核层、运行库、应用程序框架层、和应用程序层。
            linuxkernel：负责硬件的驱动程序、网络、电源、系统安全以及内存管理等功能。
            libraries和 android runtime：libraries：即c/c++函数库部分，大多数都是开放源代码的函数库，例如webkit（引擎），该函数库负责 android网页浏览器的运行，例如标准的c函数库libc、openssl、sqlite等，当然也包括支持游戏开发2dsgl和 3dopengles，在多媒体方面有mediaframework框架来支持各种影音和图形文件的播放与显示，例如mpeg4、h.264、mp3、 aac、amr、jpg和png等众多的多媒体文件格式。android的runtime负责解释和执行生成的dalvik格式的字节码。
            applicationframework（应用软件架构），java应用程序开发人员主要是使用该层封装好的api进行快速开发。
            applications:该层是java的应用程序层，android内置的googlemaps、e-mail、即时通信工具、浏览器、mp3播放器等处于该层，java开发人员开发的程序也处于该层，而且和内置的应用程序具有平等的位置，可以调用内置的应用程序，也可以替换内置的应用程序。
            上面的四个层次，下层为上层服务，上层需要下层的支持，调用下层的服务，这种严格分层的方式带来的极大的稳定性、灵活性和可扩展性，使得不同层的开发人员可以按照规范专心特定层的开发。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>17、请介绍下ContentProvider是如何实现数据共享的。</problem>
        <answer>
            答：一个程序可以通过实现一个Content provider的抽象接口将自己的数据完全暴露出去，而且Content providers是以类似数据库中表的方式将数据暴露。Content providers存储和检索数据，通过它可以让所有的应用程序访问到，这也是应用程序之间唯一共享数据的方法。
            要想使应用程序的数据公开化，可通过2种方法：创建一个属于你自己的Content provider或者将你的数据添加到一个已经存在的Content provider中，前提是有相同数据类型并且有写入Content provider的权限。
            如何通过一套标准及统一的接口获取其他应用程序暴露的数据？
            Android提供了ContentResolver，外界的程序可以通过ContentResolver接口访问ContentProvider提供的数据。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>18、Service和Thread的区别？</problem>
        <answer>
            答：servie是系统的组件，它由系统进程托管（servicemanager）；它们之间的通信类似于client和server，是一种轻量级的ipc通信，这种通信的载体是binder，它是在linux层交换信息的一种ipc。而thread是由本应用程序托管。
            1). Thread：Thread 是程序执行的最小单元，它是分配CPU的基本单位。可以用 Thread 来执行一些异步的操作。
            2). Service：Service 是android的一种机制，当它运行的时候如果是Local Service，那么对应的 Service 是运行在主进程的 main 线程上的。如：onCreate，onStart 这些函数在被系统调用的时候都是在主进程的 main 线程上运行的。如果是Remote Service，那么对应的 Service 则是运行在独立进程的 main 线程上。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>19、Android本身的api并未声明会抛出异常，则其在运行时有无可能抛出runtime异常，你遇到过吗？诺有的话会导致什么问题？如何解决？</problem>
        <answer>
            答：会，比如nullpointerException。我遇到过，比如textview.setText()时，textview没有初始化。会导致程序无法正常运行出现forceclose。打开控制台查看logcat信息找出异常信息并修改程序。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>20、IntentService有何优点?</problem>
        <answer>
            答：Acitivity的进程，当处理Intent的时候，会产生一个对应的Service； Android的进程处理器现在会尽可能的不kill掉你；非常容易使用
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>21、如果后台的Activity由于某原因被系统回收了，如何在被系统回收之前保存当前状态？</problem>
        <answer>
            答：重写onSaveInstanceState()方法，在此方法中保存需要保存的数据，该方法将会在activity被回收之前调用。通过重写onRestoreInstanceState()方法可以从中提取保存好的数据
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>22、如何将一个Activity设置成窗口的样式。</problem>
        <answer>
            答：AndroidManifest中的activity配置：android :theme="@android:style/Theme.Dialog" 
            另外android:theme="@android:style/Theme.Translucent" 是设置透明
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>23、如何退出Activity？如何安全退出已调用多个Activity的Application？ </problem>
        <answer>
            答：对于单一Activity的应用来说，退出很简单，直接finish()即可。当然，也可以用killProcess()和System.exit()这样的方法。
            对于多个activity，
            （1）记录打开的Activity：每打开一个Activity，就记录下来。在需要退出时，关闭每一个Activity即可。
            （2）发送特定广播：在需要结束应用时，发送一个特定的广播，每个Activity收到广播后，关闭即可。
            （3）递归退出：在打开新的Activity时使用startActivityForResult，然后自己加标志，在onActivityResult中处理，递归关闭。为了编程方便，最好定义一个Activity基类，处理这些共通问题。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>24、AIDL的全称是什么？如何工作？能处理哪些类型的数据？ </problem>
        <answer>
            答：全称是：Android Interface Define Language
            在Android中, 每个应用程序都可以有自己的进程. 在写UI应用的时候, 经常要用到Service. 在不同的进程中, 怎样传递对象呢?显然, Java中不允许跨进程内存共享. 因此传递对象, 只能把对象拆分成操作系统能理解的简单形式, 以达到跨界对象访问的目的. 在J2EE中,采用RMI的方式, 可以通过序列化传递对象. 在Android中, 则采用AIDL的方式. 理论上AIDL可以传递Bundle,实际上做起来却比较麻烦。
            AIDL(AndRoid接口描述语言)是一种借口描述语言; 编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程的目的. 如果需要在一个Activity中, 访问另一个Service中的某个对象, 需要先将对象转化成AIDL可识别的参数(可能是多个参数), 然后使用AIDL来传递这些参数, 在消息的接收端, 使用这些参数组装成自己需要的对象.
            AIDL的IPC的机制和COM或CORBA类似, 是基于接口的，但它是轻量级的。它使用代理类在客户端和实现层间传递值.
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>25、请解释下Android程序运行时权限与文件系统权限的区别。</problem>
        <answer>
            答：运行时权限Dalvik( android授权)，比如网络权限，读写权限等等
            文件系统 linux 内核授权，比如可读，可写，可修改等等
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>26、系统上安装了多种浏览器，能否指定某浏览器访问指定页面？请说明原由。</problem>
        <answer>
            答：可以，通过直接发送Uri把参数带过去，或者通过manifest里的intentfilter里的data属性
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>27、android系统的优势和不足</problem>
        <answer>
            答：Android平台手机 5大优势：
            一、开放性
            在优势方面，Android平台首先就是其开发性，开发的平台允许任何移动终端厂商加入到Android联盟中来。显著的开放性可以使其拥有更多的开发者，随着用户和应用的日益丰富，一个崭新的平台也将很快走向成熟。开放性对于Android的发展而言，有利于积累人气，这里的人气包括消费者和厂商，而对于消费者来讲，随大的受益正是丰富的软件资源。开放的平台也会带来更大竞争，如此一来，消费者将可以用更低的价位购得心仪的手机。
            二、挣脱运营商的束缚
            在过去很长的一段时间，特别是在欧美地区，手机应用往往受到运营商制约，使用什么功能接入什么网络，几乎都受到运营商的控制。从去年iPhone 上市 ，用户可以更加方便地连接网络，运营商的制约减少。随着EDGE、HSDPA这些2G至3G移动网络的逐步过渡和提升，手机随意接入网络已不是运营商口中的笑谈，当你可以通过手机IM软件方便地进行即时聊天时，再回想不久前天价的彩信和图铃下载业务，是不是像噩梦一样？互联网巨头Google推动的Android终端天生就有网络特色，将让用户离互联网更近。
            三、丰富的硬件选择
            这一点还是与Android平台的开放性相关，由于Android的开放性，众多的厂商会推出千奇百怪，功能特色各具的多种产品。功能上的差异和特色，却不会影响到数据同步、甚至软件的兼容，好比你从诺基亚 Symbian风格手机 一下改用苹果 iPhone ，同时还可将Symbian中优秀的软件带到iPhone上使用、联系人等资料更是可以方便地转移，是不是非常方便呢？
            四、不受任何限制的开发商
            Android平台提供给第三方开发商一个十分宽泛、自由的环境，不会受到各种条条框框的阻扰，可想而知，会有多少新颖别致的软件会诞生。但也有其两面性，血腥、暴力、情色方面的程序和游戏如可控制正是留给Android难题之一。
            五、无缝结合的Google应用
            如今叱诧互联网的Google已经走过10年度历史，从搜索巨人到全面的互联网渗透，Google服务如地图、邮件、搜索等已经成为连接用户和互联网的重要纽带，而Android平台手机将无缝结合这些优秀的Google服务。

            再说Android的5大不足：
            一、安全和隐私
            由于手机 与互联网的紧密联系，个人隐私很难得到保守。除了上网过程中经意或不经意留下的个人足迹，Google这个巨人也时时站在你的身后，洞穿一切，因此，互联网的深入将会带来新一轮的隐私危机。
            二、首先开卖Android手机的不是最大运营商
            众所周知，T-Mobile在23日，于美国纽约发布 了Android首款手机G1。但是在北美市场，最大的两家运营商乃AT ·T和Verizon，而目前所知取得Android手机销售权的仅有 T-Mobile和Sprint，其中T-Mobile的3G网络相对于其他三家也要逊色不少，因此，用户可以买账购买G1，能否体验到最佳的3G网络服务则要另当别论了！
            三、运营商仍然能够影响到Android手机
            在国内市场，不少用户对购得移动定制机不满，感觉所购的手机被人涂画了广告一般。这样的情况在国外市场同样出现。Android手机的另一发售运营商Sprint就将在其机型中内置其手机商店程序。
            四、同类机型用户减少
            在不少手机论坛都会有针对某一型号的子论坛，对一款手机的使用心得交流，并分享软件资源。而对于Android平台手机，由于厂商丰富，产品类型多样，这样使用同一款机型的用户越来越少，缺少统一机型的程序强化。举个稍显不当的例子，现在山寨机泛滥，品种各异，就很少有专门针对某个型号山寨机的讨论和群组，除了哪些功能异常抢眼、颇受追捧的机型以外。
            五、过分依赖开发商缺少标准配置
            在使用PC端的Windows Xp系统的时候，都会内置微软Windows Media Player这样一个浏览器程序，用户可以选择更多样的播放器，如Realplay或暴风影音等。但入手开始使用默认的程序同样可以应付多样的需要。在 Android平台中，由于其开放性，软件更多依赖第三方厂商，比如Android系统的SDK中就没有内置音乐 播放器，全部依赖第三方开发，缺少了产品的统一性。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>28、Android dvm的进程和Linux的进程, 应用程序的进程是否为同一个概念</problem>
        <answer>
            答：DVM指dalivk的虚拟机。每一个Android应用程序都在它自己的进程中运行，都拥有一个独立的Dalvik虚拟机实例。而每一个DVM都是在Linux 中的一个进程，所以说可以认为是同一个概念。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>29、一条最长的短信息约占多少byte? </problem>
        <answer>
            答：中文70(包括标点)，英文160，160个字节。　
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>30、DDMS和TraceView的区别? </problem>
        <answer>
            答：DDMS是一个程序执行查看器，在里面可以看见线程和堆栈等信息，TraceView是程序性能分析器 。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>31、java中如何引用本地语言 </problem>
        <answer>
            答：可以用JNI（java native interface  java 本地接口）接口 。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>32、谈谈Android的IPC（进程间通信）机制 </problem>
        <answer>
            答：IPC是内部进程通信的简称， 是共享"命名管道"的资源。Android中的IPC机制是为了让Activity和Service之间可以随时的进行交互，故在Android中该机制，只适用于Activity和Service之间的通信，类似于远程方法调用，类似于C/S模式的访问。通过定义AIDL接口文件来定义IPC接口。Servier端实现IPC接口，Client端调用IPC接口本地代理。
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>33、NDK是什么</problem>
        <answer>
            答：NDK是一些列工具的集合，NDK提供了一系列的工具，帮助开发者迅速的开发C/C++的动态库，并能自动将so和java 应用打成apk包。
            NDK集成了交叉编译器，并提供了相应的mk文件和隔离cpu、平台等的差异，开发人员只需简单的修改mk文件就可以创建出so
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>34、嵌入式操作系统内存管理有哪几种？</problem>
        <answer>
            答：　页式，段式，段页，用到了MMU,虚拟空间等技术
        </answer>
    </data>


    <data flag="2" title="描述">
        <problem>35、什么是嵌入式实时操作系统, Android 操作系统属于实时操作系统吗? </problem>
        <answer>
            答：嵌入式实时操作系统是指当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统作出快速响应，并控制所有实时任务协调一致运行的嵌入式操作系统。主要用于工业控制、 军事设备、 航空航天等领域对系统的响应时间有苛刻的要求，这就需要使用实时系统。又可分为软实时和硬实时两种，而android是基于linux内核的，因此属于软实时。
        </answer>
    </data>



</datas>
